Packages
========

What happens when you execute ``flit publish``?

This will execute two steps:

1. build packages locally and put them in the ``dist`` directory
2. upload the packages to PyPI

The first step can also be executed individually via ``flit build``. This can be
useful to check if the packages contain what you want, or to test locally if
they work OK, before publishing them to the world.

By default ``flit build`` will create two packages in the ``dist`` folder::

    $ flit build
    $ cd dist
    $ ls -1
    foobar-0.1-py2.py3-none-any.whl
    foobar-0.1.tar.gz

1. A "wheel" package in ``<name>-<version>-py3-none-any.whl``
2. A "sdist" package in ``<name>-<version>.tar.gz``

And ``flit publish`` will build, then upload those two files to PyPI.

Here's a few examples of packages created with flit:

- https://pypi.org/project/testpath/#files
- https://pypi.org/project/fastapi/#files
- https://pypi.org/project/flit/#files (flit itself)

Let's first look at what's in the ``wheel`` and what's in the ``sdist``, and
then at the end of this page there's a few notes why ``flit`` by default creates
and uploads both versions.

wheel
-----

By default, if there's a wheel on PyPI for a given package, ``pip install`` will
use that.

If you want to check locally what your wheel contains, you can use this command,
since wheel files are ZIP files::

    $ python -m zipfile --list foobar-0.1-py2.py3-none-any.whl 
    File Name                                             Modified             Size
    foobar.py                                      2019-05-15 14:49:28           54
    foobar-0.1.dist-info/LICENSE                   2019-05-15 14:50:54         1076
    foobar-0.1.dist-info/WHEEL                     2016-01-01 00:00:00           97
    foobar-0.1.dist-info/METADATA                  2016-01-01 00:00:00          247
    foobar-0.1.dist-info/RECORD                    2016-01-01 00:00:00          345

So the wheel only contains the code of your package (in this case just a single
file ``foobar.py``, and a ``<name>-<version>.dist-info`` folder which contains a
few files, including the ``METADATA``::

    $ unzip foobar-0.1-py2.py3-none-any.whl
    $ cat foobar-0.1.dist-info/METADATA
    Metadata-Version: 2.1
    Name: foobar
    Version: 0.1
    Summary: An amazing sample package!
    Home-page: https://github.com/sirrobin/foobar
    License: UNKNOWN
    Author: Sir Robin
    Author-email: robin@camelot.uk
    Classifier: License :: OSI Approved :: MIT License


sdist
-----

The ``sdist`` (source distribution) is a tarball. You can use this command to
check it's content::

    $ python -m tarfile --list foobar-0.1.tar.gz 
    foobar-0.1/LICENSE 
    foobar-0.1/foobar.py 
    foobar-0.1/pyproject.toml 
    foobar-0.1/setup.py 
    foobar-0.1/PKG-INFO 

In this case it doesn't contain much, however if you have tests or docs, then
you'd find that the ``sdist`` does include those, whereas the ``wheel`` doesn't.

The ``PKG-INFO`` file in the sdist is similar to the ``METADATA`` file in the wheel::

    $ python -m tarfile --extract foobar-0.1.tar.gz
    $ cat foobar-0.1/PKG-INFO
    Metadata-Version: 1.1
    Name: foobar
    Version: 0.1
    Summary: An amazing sample package!
    Home-page: https://github.com/sirrobin/foobar
    Author: Sir Robin
    Author-email: robin@camelot.uk

Then there are two files ``pyproject.toml`` and ``setup.py``.They both contain
package metadata, and instructions how to "build" the package.

That's a bit weird, since for pure-Python packages no "build" is needed really.
But for historical (in the case of ``setup.py``) and futuristic (in the case of
``pyproject.toml``) reasons, that's how it is: installing an ``sdist`` package
always includes a "build" step, even if there is no code to compile for the
simple case of a pure Python package (the only one ``flit`` currently supports).

The ``pyproject.toml`` in the package is an exact copy of the file you have in
your project::

    $ cat foobar-0.1/pyproject.toml
    [build-system]
    requires = ["flit"]
    build-backend = "flit.buildapi"

    [tool.flit.metadata]
    module = "foobar"
    author = "Sir Robin"
    author-email = "robin@camelot.uk"
    home-page = "https://github.com/sirrobin/foobar"
    classifiers = ["License :: OSI Approved :: MIT License"]

This is the ``setup.py`` that was generated by ``flit`` on the fly (without
putting that file in your project) when building the ``sdist``::

    $ cat foobar-0.1/setup.py
    #!/usr/bin/env python
    # setup.py generated by flit for tools that don't yet use PEP 517

    from distutils.core import setup


    setup(name='foobar',
        version='0.1',
        description='An amazing sample package!',
        author='Sir Robin',
        author_email='robin@camelot.uk',
        url='https://github.com/sirrobin/foobar',
        py_modules=['foobar'],
        )


Why both?
---------

``flit`` could just build and upload either the wheel or the sdist (but not both),
and ``pip install`` would work just fine.

So why are there two versions?

The wheel is the modern and recommended way to distribute Python packages.
Wheels are minimal in what they contain (just the package, not tests or docs or
other files from your project), and are lightning fast to install. So if you
choose to install only one version, choose ``flit --format wheel publish``.

The sdist is the older and traditional way to distribute Python packages.
There are a few reasons why they are still useful:

- ``sdist`` files serve as a stable archive of project releases, including
  things like docs and tests which may be left out of a wheel. Once an sdist is
  published, it will always be byte-for-byte the same, which isn't (apparently)
  true of running git archive on a tag to produce a tarball (even if you don't
  move the tag).
- In various situations, people want to install all packages from source. It's
  easier to build sdists for simple packages than to try to distinguish when a
  wheel can be considered 'source'.
- Flit may in the future allow some kind of build steps, which would make sdists
  more relevant.

So there you go: you can just do the default ``filt publish``, or if you prefer,
do ``flit --format wheel publish`` or ``flit --format sdist publish`` and
everything will work in any case.

One thing that can be useful is to check the package contents (using the
commands shown above) of the files in the ``dist`` folder before uploading to
PyPI. Or if your package has tests, to try and run those with the version in the
``sdist``, e.g. if you normally use ``pytest`` to run the tests, you can do
this::

    $ flit build
    $ cd dist
    $ python -m tarfile --extract foobar-0.1.tar.gz
    $ cd foobar-0.1
    $ pytest
